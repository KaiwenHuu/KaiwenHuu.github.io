{"version":3,"file":"component---src-pages-notes-distributedsystems-mdx-frontmatter-slug-js-content-file-path-notes-machinelearning-transformers-mdx-f1d9f915e866142c5267.js","mappings":"kKAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,MACFC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,eAClD,CAKA,IAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,C,oGCRA,MAAMU,EAAYC,IAAsB,IAArB,KAACC,EAAI,SAAEC,GAAS,EACjC,OAAON,EAAAA,cAAoBO,EAAAA,EAAQ,CACjCC,UAAWH,EAAKI,IAAIC,YAAYC,OAC/BX,EAAAA,cAAoB,IAAK,KAAMK,EAAKI,IAAIC,YAAYE,MAAON,EAAS,EAa1D,SAASO,EAAiBpB,GACvC,OAAOO,EAAAA,cAAoBG,EAAWV,EAAOO,EAAAA,cAAoBc,EAAAA,EAAqBrB,GACxF,C,6ECnBWsB,EAAc,sCACdC,EAAc,sCCoCzB,MA9Be,IAA8B,IAA7B,UAAER,EAAS,SAAEF,GAAU,EACnC,OACI,uBAAKW,UDXU,mCCYX,2BACI,sBAAIA,UDTE,mCCUF,sBAAIA,UAAWF,GACX,gBAAC,KAAI,CAACG,GAAG,IAAID,UAAWD,GAAa,SAIzC,sBAAIC,UAAWF,GACX,gBAAC,KAAI,CAACG,GAAG,SAASD,UAAWD,GAAa,UAI9C,sBAAIC,UAAWF,GACX,gBAAC,KAAI,CAACG,GAAG,OAAOD,UAAWD,GAAa,UAMpD,4BACI,sBAAIC,UD/BC,iCC+BoBT,GACxBF,GAEH,C,sECHP,MAAMa,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBrB,GAC/B,MAAMsB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfpB,EACFA,EAAWsB,GAGb,IAAIA,KAAsBtB,IAChC,CAACsB,EAAmBtB,GACzB,C","sources":["webpack://kaiwenhuu.github.io.demo/./notes/machinelearning/transformers.mdx","webpack://kaiwenhuu.github.io.demo/./src/pages/notes/distributedsystems/{mdx.frontmatter__slug}.js","webpack://kaiwenhuu.github.io.demo/./src/components/layout.module.css","webpack://kaiwenhuu.github.io.demo/./src/components/layout.js","webpack://kaiwenhuu.github.io.demo/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.p, null, \"Transformers\");\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/kaiwenhu/Code/kaiwenhuu.github.io/notes/machinelearning/transformers.mdx\";\nimport * as React from 'react';\nimport {graphql} from 'gatsby';\nimport Layout from '../../../components/layout';\nconst NotesPost = ({data, children}) => {\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title\n  }, React.createElement(\"p\", null, data.mdx.frontmatter.date), children);\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: {eq: $id}) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM D, YYYY\")\n      }\n    }\n  }\n`;\nNotesPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(NotesPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","// extracted by mini-css-extract-plugin\nexport var container = \"layout-module--container--78b04\";\nexport var heading = \"layout-module--heading--f158c\";\nexport var navLinkItem = \"layout-module--nav-link-item--a5f0a\";\nexport var navLinkText = \"layout-module--nav-link-text--69cda\";\nexport var navLinks = \"layout-module--nav-links--1113b\";","import * as React from 'react'\nimport { Link } from 'gatsby'\nimport {\n    container,\n    heading,\n    navLinks,\n    navLinkItem,\n    navLinkText\n} from './layout.module.css'\n\nconst Layout = ({ pageTitle, children }) => {\n    return (\n        <div className={container}>\n            <nav>\n                <ul className={navLinks}>\n                    <li className={navLinkItem}>\n                        <Link to=\"/\" className={navLinkText}>\n                            Home\n                        </Link>\n                    </li>\n                    <li className={navLinkItem}>\n                        <Link to=\"/notes\" className={navLinkText}>\n                            Notes\n                        </Link>\n                    </li>\n                    <li className={navLinkItem}>\n                        <Link to=\"/art\" className={navLinkText}>\n                            Art\n                        </Link>\n                    </li>\n                </ul>\n            </nav>\n            <main>\n                <h1 className={heading}>{pageTitle}</h1>\n                {children}\n            </main>\n        </div>\n    )\n}\n\nexport default Layout","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","NotesPost","_ref","data","children","Layout","pageTitle","mdx","frontmatter","title","date","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","navLinkItem","navLinkText","className","to","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}